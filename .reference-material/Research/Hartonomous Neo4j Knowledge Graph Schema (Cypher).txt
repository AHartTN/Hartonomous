-- This script creates the graph schema in Neo4j.
-- It's idempotent, using MERGE to avoid duplicate data insertion.

-- Create a unique constraint for Document IDs.
CREATE CONSTRAINT IF NOT EXISTS FOR (d:Document) REQUIRE d.documentId IS UNIQUE;

-- Create a unique constraint for Author IDs.
CREATE CONSTRAINT IF NOT EXISTS FOR (a:Author) REQUIRE a.authorId IS UNIQUE;

-- Create a unique constraint for Project IDs.
CREATE CONSTRAINT IF NOT EXISTS FOR (p:Project) REQUIRE p.projectId IS UNIQUE;

-- Define a new relationship type for multi-hop reasoning.
-- This relationship will be inferred by the AI agent itself.
-- MERGE (d:Document {documentId: '...'})-[:MENTIONS {in_section: '...'}]->(e:Entity {name: '...'})

-- The following MERGE statements serve as a template for the AI agent
-- to insert new data while ensuring idempotency.

-- TEMPLATE: MERGE a Document and its Author.
// MERGE (d:Document {documentId: $documentId})
// ON CREATE SET d.fileName = $fileName, d.fileExtension = $fileExtension
// MERGE (a:Author {authorId: $authorId})
// ON CREATE SET a.name = $authorName, a.email = $authorEmail
// MERGE (d)-[:WRITTEN_BY]->(a);

-- TEMPLATE: MERGE a Document and its Project.
// MERGE (d:Document {documentId: $documentId})
// MERGE (p:Project {projectId: $projectId})
// ON CREATE SET p.projectName = $projectName
// MERGE (d)-[:PART_OF]->(p);
